/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SSANAgent_H
#define SSANAgent_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ssan_types.h"

namespace ssan {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SSANAgentIf {
 public:
  virtual ~SSANAgentIf() {}

  /**
   * A method definition looks like C code. It has a return type, arguments,
   * and optionally a list of exceptions that it may throw. Note that argument
   * lists and exception lists are specified using the exact same syntax as
   * field lists in struct or exception definitions.
   */
  virtual bool ping() = 0;
  virtual void run(std::string& _return, const std::string& cmd) = 0;
  virtual void runAsync(std::string& _return, const std::string& cmd) = 0;

  /**
   * This method has a oneway modifier. That means the client only makes
   * a request and does not listen for any response at all. Oneway methods
   * must be void.
   */
  virtual void zip() = 0;
};

class SSANAgentIfFactory {
 public:
  typedef SSANAgentIf Handler;

  virtual ~SSANAgentIfFactory() {}

  virtual SSANAgentIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SSANAgentIf* /* handler */) = 0;
};

class SSANAgentIfSingletonFactory : virtual public SSANAgentIfFactory {
 public:
  SSANAgentIfSingletonFactory(const boost::shared_ptr<SSANAgentIf>& iface) : iface_(iface) {}
  virtual ~SSANAgentIfSingletonFactory() {}

  virtual SSANAgentIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SSANAgentIf* /* handler */) {}

 protected:
  boost::shared_ptr<SSANAgentIf> iface_;
};

class SSANAgentNull : virtual public SSANAgentIf {
 public:
  virtual ~SSANAgentNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  void run(std::string& /* _return */, const std::string& /* cmd */) {
    return;
  }
  void runAsync(std::string& /* _return */, const std::string& /* cmd */) {
    return;
  }
  void zip() {
    return;
  }
};


class SSANAgent_ping_args {
 public:

  SSANAgent_ping_args(const SSANAgent_ping_args&);
  SSANAgent_ping_args& operator=(const SSANAgent_ping_args&);
  SSANAgent_ping_args() {
  }

  virtual ~SSANAgent_ping_args() throw();

  bool operator == (const SSANAgent_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SSANAgent_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_ping_args& obj);

};


class SSANAgent_ping_pargs {
 public:


  virtual ~SSANAgent_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_ping_pargs& obj);

};

typedef struct _SSANAgent_ping_result__isset {
  _SSANAgent_ping_result__isset() : success(false) {}
  bool success :1;
} _SSANAgent_ping_result__isset;

class SSANAgent_ping_result {
 public:

  SSANAgent_ping_result(const SSANAgent_ping_result&);
  SSANAgent_ping_result& operator=(const SSANAgent_ping_result&);
  SSANAgent_ping_result() : success(0) {
  }

  virtual ~SSANAgent_ping_result() throw();
  bool success;

  _SSANAgent_ping_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SSANAgent_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSANAgent_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_ping_result& obj);

};

typedef struct _SSANAgent_ping_presult__isset {
  _SSANAgent_ping_presult__isset() : success(false) {}
  bool success :1;
} _SSANAgent_ping_presult__isset;

class SSANAgent_ping_presult {
 public:


  virtual ~SSANAgent_ping_presult() throw();
  bool* success;

  _SSANAgent_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_ping_presult& obj);

};

typedef struct _SSANAgent_run_args__isset {
  _SSANAgent_run_args__isset() : cmd(false) {}
  bool cmd :1;
} _SSANAgent_run_args__isset;

class SSANAgent_run_args {
 public:

  SSANAgent_run_args(const SSANAgent_run_args&);
  SSANAgent_run_args& operator=(const SSANAgent_run_args&);
  SSANAgent_run_args() : cmd() {
  }

  virtual ~SSANAgent_run_args() throw();
  std::string cmd;

  _SSANAgent_run_args__isset __isset;

  void __set_cmd(const std::string& val);

  bool operator == (const SSANAgent_run_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const SSANAgent_run_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_run_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_run_args& obj);

};


class SSANAgent_run_pargs {
 public:


  virtual ~SSANAgent_run_pargs() throw();
  const std::string* cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_run_pargs& obj);

};

typedef struct _SSANAgent_run_result__isset {
  _SSANAgent_run_result__isset() : success(false) {}
  bool success :1;
} _SSANAgent_run_result__isset;

class SSANAgent_run_result {
 public:

  SSANAgent_run_result(const SSANAgent_run_result&);
  SSANAgent_run_result& operator=(const SSANAgent_run_result&);
  SSANAgent_run_result() : success() {
  }

  virtual ~SSANAgent_run_result() throw();
  std::string success;

  _SSANAgent_run_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SSANAgent_run_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSANAgent_run_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_run_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_run_result& obj);

};

typedef struct _SSANAgent_run_presult__isset {
  _SSANAgent_run_presult__isset() : success(false) {}
  bool success :1;
} _SSANAgent_run_presult__isset;

class SSANAgent_run_presult {
 public:


  virtual ~SSANAgent_run_presult() throw();
  std::string* success;

  _SSANAgent_run_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_run_presult& obj);

};

typedef struct _SSANAgent_runAsync_args__isset {
  _SSANAgent_runAsync_args__isset() : cmd(false) {}
  bool cmd :1;
} _SSANAgent_runAsync_args__isset;

class SSANAgent_runAsync_args {
 public:

  SSANAgent_runAsync_args(const SSANAgent_runAsync_args&);
  SSANAgent_runAsync_args& operator=(const SSANAgent_runAsync_args&);
  SSANAgent_runAsync_args() : cmd() {
  }

  virtual ~SSANAgent_runAsync_args() throw();
  std::string cmd;

  _SSANAgent_runAsync_args__isset __isset;

  void __set_cmd(const std::string& val);

  bool operator == (const SSANAgent_runAsync_args & rhs) const
  {
    if (!(cmd == rhs.cmd))
      return false;
    return true;
  }
  bool operator != (const SSANAgent_runAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_runAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_runAsync_args& obj);

};


class SSANAgent_runAsync_pargs {
 public:


  virtual ~SSANAgent_runAsync_pargs() throw();
  const std::string* cmd;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_runAsync_pargs& obj);

};

typedef struct _SSANAgent_runAsync_result__isset {
  _SSANAgent_runAsync_result__isset() : success(false) {}
  bool success :1;
} _SSANAgent_runAsync_result__isset;

class SSANAgent_runAsync_result {
 public:

  SSANAgent_runAsync_result(const SSANAgent_runAsync_result&);
  SSANAgent_runAsync_result& operator=(const SSANAgent_runAsync_result&);
  SSANAgent_runAsync_result() : success() {
  }

  virtual ~SSANAgent_runAsync_result() throw();
  std::string success;

  _SSANAgent_runAsync_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SSANAgent_runAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SSANAgent_runAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_runAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_runAsync_result& obj);

};

typedef struct _SSANAgent_runAsync_presult__isset {
  _SSANAgent_runAsync_presult__isset() : success(false) {}
  bool success :1;
} _SSANAgent_runAsync_presult__isset;

class SSANAgent_runAsync_presult {
 public:


  virtual ~SSANAgent_runAsync_presult() throw();
  std::string* success;

  _SSANAgent_runAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_runAsync_presult& obj);

};


class SSANAgent_zip_args {
 public:

  SSANAgent_zip_args(const SSANAgent_zip_args&);
  SSANAgent_zip_args& operator=(const SSANAgent_zip_args&);
  SSANAgent_zip_args() {
  }

  virtual ~SSANAgent_zip_args() throw();

  bool operator == (const SSANAgent_zip_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SSANAgent_zip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SSANAgent_zip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_zip_args& obj);

};


class SSANAgent_zip_pargs {
 public:


  virtual ~SSANAgent_zip_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SSANAgent_zip_pargs& obj);

};

class SSANAgentClient : virtual public SSANAgentIf {
 public:
  SSANAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SSANAgentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  void run(std::string& _return, const std::string& cmd);
  void send_run(const std::string& cmd);
  void recv_run(std::string& _return);
  void runAsync(std::string& _return, const std::string& cmd);
  void send_runAsync(const std::string& cmd);
  void recv_runAsync(std::string& _return);
  void zip();
  void send_zip();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SSANAgentProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SSANAgentIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SSANAgentProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_run(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_runAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_zip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SSANAgentProcessor(boost::shared_ptr<SSANAgentIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &SSANAgentProcessor::process_ping;
    processMap_["run"] = &SSANAgentProcessor::process_run;
    processMap_["runAsync"] = &SSANAgentProcessor::process_runAsync;
    processMap_["zip"] = &SSANAgentProcessor::process_zip;
  }

  virtual ~SSANAgentProcessor() {}
};

class SSANAgentProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SSANAgentProcessorFactory(const ::boost::shared_ptr< SSANAgentIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SSANAgentIfFactory > handlerFactory_;
};

class SSANAgentMultiface : virtual public SSANAgentIf {
 public:
  SSANAgentMultiface(std::vector<boost::shared_ptr<SSANAgentIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SSANAgentMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SSANAgentIf> > ifaces_;
  SSANAgentMultiface() {}
  void add(boost::shared_ptr<SSANAgentIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void run(std::string& _return, const std::string& cmd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->run(_return, cmd);
    }
    ifaces_[i]->run(_return, cmd);
    return;
  }

  void runAsync(std::string& _return, const std::string& cmd) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->runAsync(_return, cmd);
    }
    ifaces_[i]->runAsync(_return, cmd);
    return;
  }

  void zip() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->zip();
    }
    ifaces_[i]->zip();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SSANAgentConcurrentClient : virtual public SSANAgentIf {
 public:
  SSANAgentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SSANAgentConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
  void run(std::string& _return, const std::string& cmd);
  int32_t send_run(const std::string& cmd);
  void recv_run(std::string& _return, const int32_t seqid);
  void runAsync(std::string& _return, const std::string& cmd);
  int32_t send_runAsync(const std::string& cmd);
  void recv_runAsync(std::string& _return, const int32_t seqid);
  void zip();
  void send_zip();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
