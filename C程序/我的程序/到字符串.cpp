/*
需求：判断一个整数是否是回文数

思路：
1.主函数里由输入数据-处理数据-输出数据三部分组成。
2.先进入最深层的递归,然后每打印一个字符返回到上层递归

步骤：
1.在主函数里输入数值，存到变量 i 里面
2.将 i 传给isHW函数的形参 n ，逐层进入递归直到 n ==0 再逐步返回上层
3.每返回一层执行printf()语句，将n%10+'0'以字符形式打印出来
*/

#include <stdafx.h>

void isHW(int n)
{
	static int m=0;//静态局部变量只会定义一次，静态局部变量会保存函数上一次调用后的值，所以在调用之前要重新赋值为n；
	// 加一个静态变量是为了1、在自定义函数里面就实现换行2、输入为0时putchar '0' 3、输入负数时有负号 4、再次调用时m能够复位为n
	if(m==0)
	{	//再次调用把n的值赋给m
		m=n;
	}

	if(m==n && m<0)
	{	// 如果是负数 先打印负号再把n改成正数
		printf("-");
		n=-n;
	}
	
	if( n != 0 )	
	{	//层层进入递归		
		isHW(n/10);
		printf("%c",abs(n)%10+'0');
	}
	else if(m==n)
	{
		putchar('0');
	}
	
	if(m==n || m==-n)
	{
		putchar('\n');
		m=0;
	}
}

void main()
{
	int i;
	scanf("%d",&i);
	isHW(i);
	isHW(i+1);
	isHW(i+2);
}