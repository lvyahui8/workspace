/*
int i=1;
int x[10];
int y[3][10];
&  取地址运算   * 取值运算 ，后者是通过地址取值。两者可以看成互逆运算。
比如   *&i==i==1

数组名一定是首地址，但维数不同意义不同

对于一个一维数组 x[10]，数组名可以看成是列类型地址，在这个值上面加 i ，是加上 基类型所占字节*i，
比如 x+1 ,因为数组x是整型，所以其实是在x基础上加4，这时地址就指向 下个元素

对于一个二维数组 y[3][10]，数组名是行类型地址，在这个值上加i，是加上 基类型所占字节*列宽*i，
比如 y+1，因为数组y是二维整型数组，列宽为10，所以其实是在y的基础上加上 4*10*1=40，这是地址指向了下一行的首地址

*/
#include <stdafx.h>
// 如果是建的 .c  的源文件，请把头文件改成 stdio.h

#define H 2  //指定行宽
#define N 3  //指定列宽

void main()
{
	int a[H][N]={1,2,3,4,5,6};
	int i,j;

	//遍历数组：其实就是逐个访问数组元素

	/*
	用一重循环遍历数组
	因为数组存在内存中是连续的，所以遍历完第一行后指针自然指向下一行
	
		a==&a[0]  
		*a==a[0]
		a[0]==&a[0][0]
		所以
		*(*a+0)== *(a[0]+0)==a[0][0]
		......
		*(*a+2)== *(a[0]+2)==a[0][3]
		*(*a+3)== *(a[0]+3)==a[1][0]
		......
		*(*a+5)== *(a[0]+5)==a[1][3]
		*(*a+6)== *(a[0]+6)==a[2][0]
		......
	*/
	for(i=0; i< H*N ;i++)
		printf("%d ",*(*a+i));   
	
	putchar('\n');
	//用二重循环遍历数组
	for(i=0;i<H;i++)
	{
		for(j=0;j<N;j++)
		{
			printf("%d ", *(*(a+i)+j) );
		}
	}

	putchar('\n');
}